# -- coding: utf-8 --

import os

# import you library


# import TLPLibrary
from TLPLibrary.core import *
from TLPLibrary.error import *
from TLPLibrary.entity import *
from TLPLibrary.service import InferenceLabelService


def input_data(run_parameter):
    '''
    @description: 推理程序写入的逻辑实现
    @param {TLPLibrary.core.RunParameter} run_parameter: 脚本调用时传入的参数对象
    '''
    image_path = run_parameter.path

    if os.path.isdir(image_path):
        # 批量导入操作，获取的是一个存放图片的目录
        inference_images_label_data(run_parameter, image_path)
    elif os.path.isfile(image_path):
        # 运行参数传递的单张图片的路径，导入程序针对这一张图片进行处理
        inference_image_label_data(run_parameter, image_path)



def inference_image_label_data(run_parameter, image_file_path):
    # entiry you input region and label code.
    pass


def inference_images_label_data(run_parameter, image_dir):
    for root, dirs, files in os.walk(image_dir):
        for file in files:
            print(os.path.join(root, file))
            inference_image_label_data(run_parameter, os.path.join(root, file))

def __demo_method(run_parameter, image_dir):
    images = []
    for root, dirs, files in os.walk(image_dir):
        for file in files:
            image_path = os.path.join(root, file)

            # 使用图片的路径创建图片对象，所有图片相关的数据都以图片为基础单位进行处理
            image = Image(image_path)

            # with open('读取的存储数据的源文件', 'r') as source_file:
            #     # 处理文件，找到当前图片的数据
            #     # 解析数据

            # 根据解析的数据构建图片的标签数据,找到当前图片的信息

            # 图片的meta标签创建
            image_meta_label = MetaLabel(name="dog")
            # 增加meta标签的属性
            image_meta_label.addAttribute(key="type", value_type=ValueType.TEXT, value="hound")
            image_meta_label.addAttribute(key="age", value_type=ValueType.NUMBER, value=4)
            # 将meta标签关联图片
            image.addMetaLabel(image_meta_label)

            # 图片的区域标签创建
            # 构建区域的范围，4个坐标点，左上，右上，左下，右下
            points = [(837.1087959345828,-257.7348285803571), (1058.9210291123998,-452.5918634450022), (1197.9418369768098,-294.3398615503354), (976.1296037989925,-99.48282668569021)]
            # 区域的顶点坐标
            bounding_box = [(88,77), (66,55), (44,33), (22,11)]
            # 创建一个举行区域对象
            rectangle_region = ImageRectangleRegion(points, bounding_box)

            # 区域的标签属性
            region_label = RegionLabel(name="eye")
            region_label.addAttribute(key="color", value_type=ValueType.TEXT, value="black")

            # 关联区域和标签
            rectangle_region.addRegionLabel(region_label)

            # 将区域对象标签关联图片
            image.addImageRegion(rectangle_region)

            images.append(image)
    try:
        inferenceLabelService = InferenceLabelService()
        inferenceLabelService.inferenceManyImageLabel(run_parameter, images)
        print(True)
    except DataBaseException as dbe:
        dbe.print_exception_stack()
        print(False)


def main():
    runParameter = RunParameter.get_run_parameter()
    input_data(runParameter)

if __name__ == "__main__":
    main()
